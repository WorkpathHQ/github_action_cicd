name: Base Deploy

on:
  workflow_call:
    inputs:
      EKS_CLUSTER:
        type: string
        required: true
      PROJECT_NAME:
        type: string
        required: true
      GIT_SHA:
        type: string
        required: true
      GIT_BRANCH:
        type: string
        required: true
      WP_API_VERSION:
        type: string
        required: true
      WP_WEB_VERSION:
        type: string
        required: true
      WP_ENVIRONMENT:
        type: string
        required: true
      WP_DOMAIN:
        type: string
        required: true
      WP_K8S_VERSION:
        type: string
        required: false
      GA_TRACKING_ID:
        type: string
        required: true
      SENTRY_ENVIRONMENT:
        type: string
        required: true
      SENTRY_URL:
        type: string
        required: true
      POSTHOG_HOST:
        type: string
        required: false
      AGENT_BASE:
        type: string
        required: false

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ACCESS_KEY_ID_S3:
        required: true
      AWS_SECRET_ACCESS_KEY_S3:
        required: true
      RAILS_MASTER_KEY:
        required: true
      SIDEKIQ_CACHE_PASSWORD:
        required: true
      FRAGMENT_CACHE_PASSWORD:
        required: true
      FLIPPER_CACHE_PASSWORD:
        required: true
      DATABASE_PASSWORD:
        required: true
      GIT_ACCESS_TOKEN:
        required: true
      SMTP_USERNAME:
        required: false
      SMTP_PASSWORD:
        required: false
      AZURE_API_KEY:
        required: false
      OPEN_AI_AZURE_URI:
        required: false
      POSTHOG_KEY:
        required: false




env:
  AWS_DEFAULT_REGION: eu-central-1

jobs:
  base_deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.WP_ENVIRONMENT }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set EKS context for Kubectl
        run: |
          aws eks --region ${{ env.AWS_DEFAULT_REGION }} update-kubeconfig --name ${{ inputs.EKS_CLUSTER }}

      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/WorkpathHQ/workpath_k8s/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - id: latest_release_tag
        run: |
          latestReleaseTag=$(echo $RESULT | jq | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "latest_release_tag=$latestReleaseTag" >> $GITHUB_OUTPUT
        env:
          RESULT: ${{ steps.get_latest_release.outputs.data }}

      - name: Replace k8s Version when provided
        # Added so a k8s version can be optionally chosen. If no k8s version is provided in the inputs, uses the version in env.
        id: k8sVersion
        run: |
          k8sVersion=${{ inputs.WP_K8S_VERSION }}
          echo "k8sVersion=${k8sVersion:=${{ steps.latest_release_tag.outputs.latest_release_tag }}}" >> $GITHUB_OUTPUT

      - name: Clone workpath_k8s repository
        uses: actions/checkout@v4
        with:
          repository: WorkpathHQ/workpath_k8s
          ref: ${{ steps.k8sVersion.outputs.k8sVersion }}
          token: ${{ secrets.GIT_ACCESS_TOKEN }}
          path: ${{ github.workspace }}/workpath_k8s

      - name: Deploying
      # Added if else to differentiate between the environments
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.22.9/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          cd ${{ github.workspace }}/workpath_k8s/workpath_app
          ./envsubst-multi.sh && source ./envsubst-multi.sh
          if [ ${{ inputs.WP_ENVIRONMENT }} == qa ]; then
            kubectl apply -k overlays/${{ inputs.WP_ENVIRONMENT }}
            kubectl rollout status deploy workpath-web -n $WP_SUBDOMAIN --timeout=0s
            kubectl rollout status deploy workpath-api -n $WP_SUBDOMAIN --timeout=300s
            echo "Successful deployment on $(tr '[:lower:]' '[:upper:]' <<< ${{ inputs.WP_ENVIRONMENT }}), reachable via $WP_SUBDOMAIN.admin.$WP_DOMAIN, $WP_SUBDOMAIN.api.$WP_DOMAIN, $WP_SUBDOMAIN.connect.$WP_DOMAIN"
          else
            kubectl apply -k overlays/${{ inputs.WP_ENVIRONMENT }} --selector "app in (workpath-ns, workpath-web)"
            kubectl -n workpath-${{ inputs.WP_ENVIRONMENT }} rollout restart deployment workpath-web
            kubectl -n workpath-${{ inputs.WP_ENVIRONMENT }} rollout status deploy workpath-web --timeout=0s
            echo "Successful deployment on $(tr '[:lower:]' '[:upper:]' <<< ${{ inputs.WP_ENVIRONMENT }})"
          fi


        # Workaround for setting inputs as environmental variables (https://github.com/actions/runner/issues/665#issuecomment-699481628)
        env:
          PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
          GIT_SHA: ${{ inputs.GIT_SHA }}
          GIT_BRANCH: ${{ inputs.GIT_BRANCH }}
          WP_API_VERSION: ${{ inputs.WP_API_VERSION }}
          WP_WEB_VERSION: ${{ inputs.WP_WEB_VERSION }}
          WP_ENVIRONMENT: ${{ inputs.WP_ENVIRONMENT }}
          AWS_ACCESS_KEY_ID_S3: ${{ secrets.AWS_ACCESS_KEY_ID_S3 }}
          WP_DOMAIN: ${{ inputs.WP_DOMAIN }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          GA_TRACKING_ID: ${{ inputs.GA_TRACKING_ID }}
          SENTRY_ENVIRONMENT: ${{ inputs.SENTRY_ENVIRONMENT }}
          SENTRY_URL: ${{ inputs.SENTRY_URL }}
          AWS_SECRET_ACCESS_KEY_S3: ${{ secrets.AWS_SECRET_ACCESS_KEY_S3 }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          SIDEKIQ_CACHE_PASSWORD: ${{ secrets.SIDEKIQ_CACHE_PASSWORD }}
          FRAGMENT_CACHE_PASSWORD: ${{ secrets.FRAGMENT_CACHE_PASSWORD }}
          FLIPPER_CACHE_PASSWORD: ${{ secrets.FLIPPER_CACHE_PASSWORD }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          AZURE_API_KEY: ${{ secrets.STAGING_AZURE_API_KEY }}
          OPEN_AI_AZURE_URI: ${{ secrets.STAGING_OPEN_AI_AZURE_URI }}
          POSTHOG_KEY: ${{ secrets.POSTHOG_KEY }}


